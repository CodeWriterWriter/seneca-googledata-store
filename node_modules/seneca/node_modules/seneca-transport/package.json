{
  "name": "seneca-transport",
  "version": "0.1.2",
  "description": "Seneca transport",
  "main": "transport.js",
  "scripts": {
    "test": "mocha test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rjrodger/seneca-transport.git"
  },
  "keywords": [
    "seneca",
    "transport",
    "plugin"
  ],
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com"
  },
  "license": "MIT",
  "dependencies": {
    "nid": "~0.3.2",
    "underscore": "~1.6.0",
    "async": "~0.7.0",
    "patrun": "~0.1.5",
    "redis": "~0.10.1",
    "request": "~2.34.0",
    "fivebeans": "~1.1.1",
    "connect": "~2.14.4",
    "gex": "~0.1.3",
    "chai": "~1.9.1",
    "mocha": "~1.18.2"
  },
  "devDependencies": {},
  "files": [
    "README.md",
    "LICENSE.txt",
    "transport.js"
  ],
  "readme": "# seneca-transport\n\n## An action transport plugin for the [Seneca](http://senecajs.org) framework\n\nThis plugin allows you to execute Seneca actions in separate Seneca processes. The default transport\nmechanism is HTTP. Redis publish-subscribe is also built-in.\n\nThis plugin provides the implementation for the <i>listen</i>, <i>client</i>, and <i>proxy</i> convenience methods on the\nSeneca object. It is included as a dependent module of the Seneca module.\n\nYou can provide your own transport mechanisms by overriding the transport action patterns (see below).\n\n\n## Support\n\nIf you're using this module, feel free to contact me on Twitter if you\nhave any questions! :) [@rjrodger](http://twitter.com/rjrodger)\n\nCurrent Version: 0.1.2\n\nTested on: Node 0.10.24, Seneca 0.5.17\n\n[![Build Status](https://travis-ci.org/rjrodger/seneca-transport.png?branch=master)](https://travis-ci.org/rjrodger/seneca-transport)\n\n\n\n## Quick example\n\nFirst, define a service (this is just a Seneca plugin):\n\n```JavaScript\nmodule.exports = function() {\n  this.add( 'foo:1', function(args,done){done(null,{s:'1-'+args.bar})} )\n  this.add( 'foo:2', function(args,done){done(null,{s:'2-'+args.bar})} )\n}\n```\n\nStart the service:\n\n```JavaScript\nrequire('seneca')()\n  .use('foo')\n  .listen()\n```\n\nAnd talk to it:\n\n```JavaScript\nrequire('seneca')()\n  .listen()\n  .ready(function(){\n    this.act('foo:1,bar:A',function(err,out){console.log(out)})\n    this.act('foo:2,bar:B',function(err,out){console.log(out)})\n  })\n```\n\nAnd this prints:\n\n```sh\n1-A\n2-B\n```\n\n\nTo run this example, try in one terminal\n\n```sh\nnode test/service-foo.js\n```\n\nand in another:\n\n```sh\nnode test/client-foo.js\n```\n\n\n\n\n## Install\n\nThis module is included in the standard Seneca module, so install using that:\n\n```sh\nnpm install seneca\n```\n\n\n\n## Action Patterns\n\n### role:transport, cmd:listen\n\nStarts listening for actions. The <i>type</i> argument specifies the\ntransport mechanism. Current built-ins are <i>direct</i> (which is\nHTTP), and <i>pubsub</i> (which is Redis).\n\n\n### role:transport, cmd:client\n\nCreate a Seneca instance that sends actions to a remote service.  The\n<i>type</i> argument specifies the transport mechanism.\n\n\n## Hook Patterns\n\nThese patterns are called by the primary action patterns. Add your own for additional transport mechanisms.\n\n   * role:transport, hook:listen, type:direct\n   * role:transport, hook:client, type:pubsub\n   * role:transport, hook:listen, type:direct\n   * role:transport, hook:client, type:pubsub\n\nThese all take additional configuration arguments, which are passed through from the primary actions:\n\n   * host\n   * port\n   * path (not used by pubsub)\n\n\n\n## Pattern Selection\n\nIf you only want to transport certain action patterns, use the <i>pin</i> argument to pick these out. See the\n<i>test/client-pubsub-foo.js</i> and <i>test/service-pubsub-foo.js</i> files for an example.\n\n\n\n## Logging\n\nTo see what this plugin is doing, try:\n\n```sh\nnode your-app.js --seneca.log=plugin:transport\n```\n\nTo skip the action logs, use:\n\n```sh\nnode your-app.js --seneca.log=type:plugin,plugin:transport\n```\n\nFor more on logging, see the [seneca logging example](http://senecajs.org/logging-example.html).\n\n\n## Test\n\n```sh\ncd test\nmocha transport.test.js --seneca.log.all\n```\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rjrodger/seneca-transport/issues"
  },
  "homepage": "https://github.com/rjrodger/seneca-transport",
  "_id": "seneca-transport@0.1.2",
  "_from": "seneca-transport@~0.1.2"
}
